<?php
namespace Desyncr\Wtngrm\Beanstalk\Service;

/**
 * Generated by PHPUnit_SkeletonGenerator
 */
class BeanstalkWorkerServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var BeanstalkWorkerService
     */
    protected $object;
    protected $mock;
    protected $defaults =
            array('servers' =>
                    array('workers' =>
                        array(
                             array('host' => '127.0.0.1', 'port' => 4730)
                    )
                )
            );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mock = $this->getMockBuilder('\Pheanstalk_Pheanstalk', array('useTube', 'reserve', 'watch', 'put'))
            ->disableOriginalConstructor()
            ->getMock();

        $this->mock->expects($this->any())
            ->method('useTube')
            ->will($this->returnValue($this->mock));

        $this->mock->expects($this->any())
            ->method('put')
            ->will($this->returnValue($this->mock));

        $this->mock->expects($this->any())
            ->method('reserve')
            ->will($this->returnValue($this->mock));

        $this->mock->expects($this->any())
            ->method('watch')
            ->will($this->returnValue($this->mock));

       $this->object = new BeanstalkWorkerService($this->mock, $this->defaults);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Desyncr\Wtngrm\Beanstalk\Service\BeanstalkWorkerService::__construct
     */
    public function testConfiguration()
    {
        $options = array(
            'servers' => array(
                'workers' => array(
                    array('host' => '127.0.0.1', 'port' => 4730),
                    array('host' => '127.0.0.2', 'port' => 4730)
                )
            )
        );

        $this->object = new BeanstalkWorkerService($this->mock, $options);
        $this->assertEquals($options['servers'], $this->object->getOption('servers'));

    }

    /**
     * @covers Desyncr\Wtngrm\Beanstalk\Service\BeanstalkWorkerService::dispatch
     */
    public function testDispatch()
    {
        $key = 'test.job';
        $job = array('id' => $key);
        $this->object->add($key, $job);

        $this->mock->expects($this->once())
            ->method('reserve')
            ->will($this->returnValue($this->mock));

        $this->object->dispatch();

    }

    /**
     * @covers Desyncr\Wtngrm\Beanstalk\Service\BeanstalkWorkerService::dispatch
     */
    public function testDispatchMultipleJobs()
    {

        $this->mock->expects($this->exactly(5))
            ->method('watch')
            ->will($this->returnValue($this->mock));

        for ($i = 0 ; $i <= 4 ; $i++) {
            $this->object->add($key . $i, $job[$i]);
        }

    }
}
